/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gremlinrunner;

import java.util.logging.Level;
import java.util.logging.Logger;
import static sun.management.snmp.jvminstr.JvmThreadInstanceEntryImpl.ThreadStateMap.Byte0.runnable;

/**
 *
 * @author rohan
 */
public class Gremlin  {
	//these are the gremlins running around the map
	/**
	 * The amount of steps a gremlin will move
	 */
	public static final byte gremlinRange = 1;

/**
	* the coordinates of the gremlin
	*/
private	byte[] coord;
/**
	* Makes a gremlin
	* @param x x coordinate
	* @param y y coordinate 
	* @param z z coordinate
	* the maze could be 4d but for now w is always 0
	*/
	Gremlin(byte x, byte y, byte z) {
		byte w = 0; //only 3d for now
		coord = new byte[4];
		coord[0] = w;
		coord[1] = z;
		coord[2] = y;
		coord[3] = x;
		GremlinRunner.maze[w][z][y][x] = (byte) 127;
	}


	/**
	 * This gremlin walk in some random orthogonal direction
	 */
	public void move() {
		byte[][][][] tempMaze=GremlinRunner.maze.clone();
		int counter = 0;
		int choice = 8;
		movementBlock:
		for (int i = 0; i < 12; i++) {
			try {
				choice = utility.getRandom(8);
				if (choice == 0) {
					if (tempMaze[coord[0] + 1][coord[1]][coord[2]][coord[3]] == 1) {
						tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
						tempMaze[coord[0] + 1][coord[1]][coord[2]][coord[3]] = (byte) 127;
						coord[0] += 1;
						break movementBlock;
					}
				} else if (choice == 1) {
					if (tempMaze[coord[0] - 1][coord[1]][coord[2]][coord[3]] == 1) {
						tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
						tempMaze[coord[0] - 1][coord[1]][coord[2]][coord[3]] = (byte) 127;
						coord[0] -= 1;
											break movementBlock;
					}
				} else if (choice == 2) {
					if (tempMaze[coord[0]][coord[1] + 1][coord[2]][coord[3]] == 1) {
						tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
						tempMaze[coord[0]][coord[1] + 1][coord[2]][coord[3]] = (byte) 127;
						coord[1] += 1;
											break movementBlock;
					}
				} else if (choice == 3) {
					if (tempMaze[coord[0]][coord[1] - 1][coord[2]][coord[3]] == 1) {
						tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
						tempMaze[coord[0]][coord[1] - 1][coord[2]][coord[3]] = (byte) 127;
						coord[1] -= 1;
											break movementBlock;
					}
				} else if (choice == 4) {
					if (tempMaze[coord[0]][coord[1]][coord[2] + 1][coord[3]] == 1) {
						tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
						tempMaze[coord[0]][coord[1]][coord[2] + 1][coord[3]] = (byte) 127;
						coord[2] += 1;
											break movementBlock;
					}
				} else if (choice == 5) {
					if (tempMaze[coord[0]][coord[1]][coord[2] - 1][coord[3]] ==1) {
						tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
						tempMaze[coord[0]][coord[1]][coord[2] - 1][coord[3]] = (byte) 127;
						coord[2] -= 1;
											break movementBlock;
					}
				} else if (choice == 6) {
					if (tempMaze[coord[0]][coord[1]][coord[2]][coord[3] + 1] == 1) {
						tempMaze[coord[0]][coord[1]][coord[2]][coord[3] + 1] = 127;
						tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
						coord[3] += 1;
											break movementBlock;
					}
				} else if (choice == 7) {
					if (tempMaze[coord[0]][coord[1]][coord[2]][coord[3] - 1] == 1) {
						tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
						tempMaze[coord[0]][coord[1]][coord[2]][coord[3] - 1] = (byte) 127;
						coord[3] -= 1;
											break movementBlock;
					}
				} else if (choice == 8) {//wait a second there are no choices left
					System.out.println("Something bad happened ouch!");
				}
			} catch (Exception e) {/*gotcha*/
//cant afford to go off the map now can we

			}
			choice++;
			choice %= 8;
		}
	}

	/**
	 * Gremlin does its attack (if it can)
	 */
	public void doAttack()  {
		byte[][][][] tempMaze=GremlinRunner.maze.clone();
		try {
			if (tempMaze[coord[0] + 1][coord[1]][coord[2]][coord[3]] == 2) {
				tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
				tempMaze[coord[0] + 1][coord[1]][coord[2]][coord[3]] = (byte) 127;
				coord[0] += 1;
			GremlinRunner.alive=false;
			}
		} catch (Exception thatSquareDoesntExist) {
		}
		try {
			if (tempMaze[coord[0] - 1][coord[1]][coord[2]][coord[3]] == 2) {
				tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
				tempMaze[coord[0] - 1][coord[1]][coord[2]][coord[3]] = (byte) 127;
				coord[0] -= 1;
						GremlinRunner.alive=false;
			}
		} catch (Exception thatSquareDoesntExist) {
		}

		try {
			if (tempMaze[coord[0]][coord[1] + 1][coord[2]][coord[3]] == 2) {
				tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
				tempMaze[coord[0]][coord[1] + 1][coord[2]][coord[3]] = (byte) 127;
				coord[1] += 1;
						GremlinRunner.alive=false;
			}
		} catch (Exception thatSquareDoesntExist) {
		}

		try {
			if (tempMaze[coord[0]][coord[1] - 1][coord[2]][coord[3]] == 2) {
				tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
				tempMaze[coord[0]][coord[1] - 1][coord[2]][coord[3]] = (byte) 127;
				coord[1] -= 1;
						GremlinRunner.alive=false;
			}
		} catch (Exception thatSquareDoesntExist) {
		}

		try {
			if (tempMaze[coord[0]][coord[1]][coord[2] + 1][coord[3]] == 2) {
				tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
				tempMaze[coord[0]][coord[1]][coord[2] + 1][coord[3]] = (byte) 127;
				coord[2] += 1;
						GremlinRunner.alive=false;
			}
		} catch (Exception thatSquareDoesntExist) {
		}

		try {
			if (tempMaze[coord[0]][coord[1]][coord[2] - 1][coord[3]] == 2) {
				tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
				tempMaze[coord[0]][coord[1]][coord[2] - 1][coord[3]] = (byte) 127;
				coord[2] -= 1;
						GremlinRunner.alive=false;
			}
		} catch (Exception thatSquareDoesntExist) {
		}

		try {
			if (tempMaze[coord[0]][coord[1]][coord[2]][coord[3] + 1] == 2) {
							tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
				tempMaze[coord[0]][coord[1]][coord[2]][coord[3] + 1] = 127;

				coord[3] += 1;
						GremlinRunner.alive=false;
			}
		} catch (Exception thatSquareDoesntExist) {
		}

		try {
			if (tempMaze[coord[0]][coord[1]][coord[2]][coord[3] - 1] == 2) {
				tempMaze[coord[0]][coord[1]][coord[2]][coord[3]] = 1;
				tempMaze[coord[0]][coord[1]][coord[2]][coord[3] - 1] = (byte) 127;
				coord[3] -= 1;
						GremlinRunner.alive=false;
			}
		} catch (Exception thatSquareDoesntExist) {
		}
if(!GremlinRunner.alive){
	GremlinRunner.alive=false;
	JFRAME.isGoing=false;
	Exception theUserIsDead=new Exception ("YOUR DEAD BUDDY");
System.out.println("DEATH");
//throw theUserIsDead;
}
	}
/**
	*Every turn the Gremlin tries to attack (if it can) and then moves
	* it gets sent to a fictional location (one way off the board) if its dead
	* the gremlin can not move because its move method just throws an exception 
	* and catches it when it does
	* almost like a gremlin prison
	*/
	public void takeTurn()  {
		byte[][][][] tempMaze=GremlinRunner.maze.clone();
	
		if(coord[0]==-127||tempMaze[coord[0]][coord[1]][coord[2]][coord[3]]!=127){
//im dead 
			byte[] coordsDead={-127,-127,-127,-127};
			coord=coordsDead.clone();
		}
		else{		
		doAttack();
		move();
		}
}
}
