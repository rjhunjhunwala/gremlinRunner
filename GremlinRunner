/*/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package gremlinrunner;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
	*
	* @author rohan
	*/
public class GremlinRunner {
/**
	* distance the user can see 
 * Recommended size 2
	*/
		public static int window;
/**
	* if the size is even the maze will not be nicely contained by walls
	* Also the "glade" in the middle will be off center. 
	* Not a big deal because the program automatically renders positions off the 
	* side of the maze as walls
	* recommended size 11
	*/
	 public static int size;
	//if the user wants gremlins this is true
	/**
		* If gremlins are enabled the recommended setting is yes
		*/
		public static boolean areGremlins;
		/**
			* This is the number of gremlins in the maze
			* currently unused but may be used later
			*/
	public static int numberOfGremlins=0;
	/**
		* An array to hold the Gremlins in the map
		*/
	public static ArrayList<Gremlin> gremlins=new ArrayList();
/**
	* "w" is the 4th dimension
	* not yet implemented
	*/
	private static int wSize = 1;
	//these are the dimensions
	/**
		* The size of the z dimension
		*/
	public static int zSize = size;
	/**
		* The size of the y dimension
		*/
public	static int ySize = size;
	/**
		* The size of the x dimension
		*/
public	static int xSize = size;
	/**
		* The dimensions are by default all the same. I.e the maze is a cube
		*/
	/**
		* start position for the human and the maze generator
		*/
	public static byte[] position = {0, 0, 0, 0};
	/**
		* 4d maze
	 */
	public static byte[][][][] maze = new byte[wSize][zSize][ySize][xSize];
	/**
		* the nodes for use in the algorithm to make a perfect maze
		* A place for the program to store the places its carved passages to
		* This way it can recursively backtrack to them when needed 
	 */
	private static ArrayList<byte[]> nodes = new ArrayList(1);
	/**
		* The density of the gremlin population i.e gremlins/100 squares
		*/
	public static int gremlinDensity;
	/**
		* The guiHandler.gui handler
		*/
		public static JFRAME gui=new JFRAME();
	/**
		* done variable to indicate whether it is done or not
		*/
		public static boolean done;
		/**
		* @param args the command line arguments
		*/
	public static void main(String[] args) {
		playGame();
	}
		public static boolean alive=true;
	/**
		* the body of the game
		*/
	public static void playGame(){
		fixValues();		
		make4dMaze();
		maze[0][position[1]][position[2]][position[3]] = 2;
		makeGlade();
		makeGremlins();
		maze[0][size-1][size-1][size-1]=3;
	gui.mainMethod();
alive=true;
while(alive){
	if(position[1]==size-1&&position[2]==size-1&&position[3]==size-1){
		break;
	}
	else
	{
	System.out.print("");
	}	
//dont ask! java doesnt work without this line!!!!!!!!!!!!!!!
}
		if(!alive){
gui.getStringFromPopUp("A gremlin slaughtered you");
		}else{
gui.getStringFromPopUp("You are a true warrior");
gui.getStringFromPopUp("You survived the labyrinth");
		}
		gui=new JFRAME();
		if(gui.getStringFromPopUp("Play Again?").toLowerCase().contains('y'+"")){
			playGame();
		}
		else{
			gui.setVisible(false);
			System.exit(1);
		}
	}
	/**
		* turns the byte[][][][] maze into a 4d maze with a nifty algorithm that
		* carves passages by setting the value of the index =1 
		* 1=hole 
		* 0= wall 
		* (optimized to prevent me from having to manually fill in walls)
		*/
	public static void make4dMaze() {
		byte[] mazeCoords = position.clone();
		nodes.add(0, mazeCoords);
		
		while (nodes.size() > 0) {
			findNewNode(nodes.get(nodes.size() - 1));
			
		}
	}
	/**
		* Displays the whole maze level by level impractical for view of large mazes
		*/
	public static void dispWholeMaze(){
		for(byte[][] x:maze[0]){
			dispMaze(x);
			System.out.println("\n");
		}
	}
	/**
		*
		* @param node
		* from which its looking for nodes to grow to
		* if it fails it deletes this node from the list of nodes its growing to
		* otherwise it adds the first random node it finds
		*/
	public static void findNewNode(byte[] node) {
		boolean done = false;
		int counter = 0;
		int choice;
		while (!done) {
			if (counter >= 12) {
				choice = counter - 12;
			} else {
				choice = utility.getRandom(8);
			}
			try {
				if (choice == 0) {
					if (maze[node[0] + 2][node[1]][node[2]][node[3]] == 0) {
						maze[node[0] + 2][node[1]][node[2]][node[3]] = 1;
						maze[node[0] + 1][node[1]][node[2]][node[3]] = 1;
						node[0] += 2;
						done = true;
					}
				} else if (choice == 1) {
					if (maze[node[0] - 2][node[1]][node[2]][node[3]] == 0) {
						maze[node[0] - 2][node[1]][node[2]][node[3]] = 1;
						maze[node[0] - 1][node[1]][node[2]][node[3]] = 1;
						node[0] -= 2;
						done = true;
					}
				} else if (choice == 2) {
					if (maze[node[0]][node[1] + 2][node[2]][node[3]] == 0) {
						maze[node[0]][node[1] + 2][node[2]][node[3]] = 1;
						maze[node[0]][node[1] + 1][node[2]][node[3]] = 1;
						node[1] += 2;
						done = true;
					}
				} else if (choice == 3) {
					if (maze[node[0]][node[1] - 2][node[2]][node[3]] == 0) {
						maze[node[0]][node[1] - 2][node[2]][node[3]] = 1;
						maze[node[0]][node[1] - 1][node[2]][node[3]] = 1;
						node[1] -= 2;
						done = true;
					}
				} else if (choice == 4) {
					if (maze[node[0]][node[1]][node[2] + 2][node[3]] == 0) {
						maze[node[0]][node[1]][node[2] + 2][node[3]] = 1;
						maze[node[0]][node[1]][node[2] + 1][node[3]] = 1;
						node[2] += 2;
						done = true;
					}
				} else if (choice == 5) {
					if (maze[node[0]][node[1]][node[2] - 2][node[3]] == 0) {
						maze[node[0]][node[1]][node[2] - 2][node[3]] = 1;
						maze[node[0]][node[1]][node[2] - 1][node[3]] = 1;
						node[2] -= 2;
						done = true;
					}
				} else if (choice == 6) {
					if (maze[node[0]][node[1]][node[2]][node[3] + 2] == 0) {
						maze[node[0]][node[1]][node[2]][node[3] + 2] = 1;
						maze[node[0]][node[1]][node[2]][node[3] + 1] = 1;
						node[3] += 2;
						done = true;
					}
				} else if (choice == 7) {
					if (maze[node[0]][node[1]][node[2]][node[3] - 2] == 0) {
						maze[node[0]][node[1]][node[2]][node[3] - 2] = 1;
						maze[node[0]][node[1]][node[2]][node[3] - 1] = 1;
						node[3] -= 2;
						done = true;
					}
				} else if (choice == 8) {//wait a second there are no choices left
					nodes.remove(nodes.size() - 1);
					return;
				}
				
			} catch (Exception e) {/*gotcha*/
//cant afford to go off the map now can we
				
			}
			counter++;
		}
		byte[] cloned = node.clone();
		nodes.add(cloned);
		
	}
	/**
		* makes a user move
		* @param move is a character w a s d r to go up v to go down
		*/
	public static void makeMove(char move) {
		byte[] tempPosition = position.clone();
		try {
			maze[0][position[1]][position[2]][position[3]] = 1;
			if (move == 'w') {
				position[2] -= 1;
			} else if (move == 's') {
				position[2] += 1;
			} else if (move == 'a') {
				position[3] -= 1;
			} else if (move == 'd') {
				position[3] += 1;
			} else if (move == 'r') {
				position[1] -= 1;
			} else if (move == 'v') {
				position[1] += 1;
			}else{}
			if (maze[0][position[1]][position[2]][position[3]] != 0) {
				// the square is empty he is good to go
				maze[0][position[1]][position[2]][position[3]] = 2;
			} else {
				// if the square is occupied
				maze[0][tempPosition[1]][tempPosition[2]][tempPosition[3]] = 2;
				position = tempPosition.clone();
			}
			
		} catch (Exception e) {
			//he tried to move to a nonexistent or occupied square
			maze[0][tempPosition[1]][tempPosition[2]][tempPosition[3]] = 2;
			position = tempPosition.clone();
		}
	}
	/**
		* prints to console the area around the player "P"
		* @param renderDistance render distance around it
		*/
	public static void dispPosition(int renderDistance) {
		for (int z = position[1] - renderDistance; 
										z <= position[1] + renderDistance; z++) {
			for (int y = position[2] - renderDistance; 
											y <= position[2] + renderDistance; y++) {
				for (int x = position[3] - renderDistance; 
												x <= position[3] + renderDistance; x++) {
					String symbol = "[!]"; //its a gremlin unless its one of the others
					// a gremlin has code 127
					try {
						if (maze[0][z][y][x] == 1) {
							symbol = "[ ]";//pasage
						} else if (maze[0][z][y][x] == 2) {
							symbol = "[P]";//player
						} else if (maze[0][z][y][x] == 0) {
							symbol = "[W]";//wall
						}else if(maze[0][z][y][x]==3){
							symbol="[F]";//Finish line
						}
					} catch (Exception e) {
// Render walls all around the maze
						symbol = "[W]";
					}
					System.out.print(symbol);
				}
				System.out.println();
			}
			System.out.println("\n");
		}
	}
	/**
		* displays one layer of the maze
		* @param inMaze maze taken in
		*/
	public static void dispMaze(byte[][] inMaze) {
		for (byte[] a : inMaze) {
			for (byte b : a) {
				if (b == 0) {
					System.out.print("[W]");
				} else if (b == 1) {
					System.out.print("[ ]");
				} else if(b==2) {
					System.out.print("[â˜º]");
				}else {
					System.out.print("[!]");
				}
			}
			System.out.println();
		}
	}
	/**
		* makes the little 3 by 3 by 3 hole in the middle of the maze
		* Almost like the glade in maze runner
		* By glade radius it means the farthest distance away from the center cube
		* the glade extends rounded down to the nearest integer
		*/
	public static void makeGlade() {
		int d=1;//glade "radius"
		for (int z = size/2 - d; z <= size/2 + d; z++) {
			for (int y = size/2 - d; y <= size/2 + d; y++) {
				for (int x = size/2 - d; x <= size/2 + d; x++) {
					try {
						maze[0][z][y][x]=1;
					} catch (Exception e) {
						//what?? this shouldnt happen unless
						//the user doesnt know what an number 9-25 is
						
					}
				}
			}
		}
		
	}

	/**
		* Randomly spawns gremlins at random points in the map
		* the gremlinDensity is how dense the gremlins are
		* starts a minimum distance away from the player 
		*/
	public static void makeGremlins() {
		if(areGremlins){
		for(byte w=0;w<wSize;w++) {
			for(byte z=3;z<xSize;z++){
				for(byte y=3;y<ySize;y++){
					for(byte x=3;x<zSize;x++){
						if(utility.getRandom(100)<=gremlinDensity&&maze[w][z][y][x]==1){
							Gremlin someNewGremlin=new Gremlin(x,y,z);
							gremlins.add(someNewGremlin);
							numberOfGremlins++;
						}
					}
				}
			}
		}
		}
	}


	/**
		* Fixes the global variable values at the start of the program
		*/
	public static void fixValues() {
		try{
			gui.getStringFromPopUp("Type anything for custom "
											+ "settings and nothing for default "
											+ "settings.").charAt(0);
		size=Integer.parseInt(gui.getStringFromPopUp("Size of the maze (9)"));
		areGremlins=gui.getStringFromPopUp("Do you want gremlins (yes)").
										toLowerCase().contains('y'+"");
		if(areGremlins){
			gremlinDensity=Integer.parseInt(gui.getStringFromPopUp("Gremlins per 100 "
											+ "squares (15/100)"));
		}
		}
		catch(Exception defaultSettings){
			size = 9;
		gremlinDensity=15;
		areGremlins=true;
	}
		finally{	numberOfGremlins=0;
		window=2;
		gremlins=new ArrayList(1);
//"w" is the 4th dimension if used
		wSize = 1;
		//these are the dimensions
		zSize = size;
		ySize = size;
		xSize = size;
		//start positions
		position[0] = 0;
		position[1]=0;
		position[2]=0;
		position[3]=0;
		//4d maze
		maze = new byte[wSize][zSize][ySize][xSize];
		//the nodes for use in the algorithm to make a perfect maze
		nodes = new ArrayList(1);
		done=true;}
		gui.getStringFromPopUp("At the start make any move to play");
	}
}
